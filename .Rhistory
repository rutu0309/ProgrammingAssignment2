## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
## This function sets the value of the matrix
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y                 ##Special objects
i <<- NULL
}
## This function gets the value of the matrix and calculates its inverse
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set,
get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
##This function computes the inverse of the special “matrix” returned by makeCacheMatrix above.
##If the inverse has already been calculated (and the matrix has not changed),
##then cacheSolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
i <- x$getinverse()
if (!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
b <- matrix(c(1,2,3,4),2,2)
b1 <- cacheSolve(b)
b1 <- makeCacheMatrix(b)
b1
cacheSolve(b1)
